/* scheduler_main.cpp

 Generated by phxrpc_pb2server from scheduler.proto

*/

#include <iostream>
#include <memory>
#include <signal.h>
#include <unistd.h>

#include "phxrpc/file.h"
#include "phxrpc/http.h"
#include "phxrpc/rpc.h"

#include "phxrpc_scheduler_dispatcher.h"
#include "scheduler_server_config.h"
#include "scheduler_service_impl.h"


#include "phxqueue/comm.h"
#include "phxqueue/plugin.h"

#include "phxqueue_phxrpc/plugin.h"
#include "phxqueue_phxrpc/scheduler.h"


using namespace std;

static phxqueue::comm::LogFunc g_log_func = nullptr;


static int MakeArgs(SchedulerServerConfig &config, ServiceArgs_t &args) {
    args.config = &config;

    phxqueue::scheduler::SchedulerOption opt;

    opt.topic = config.GetTopic();
    opt.ip = config.GetHshaServerConfig().GetBindIP();
    opt.port = config.GetHshaServerConfig().GetPort();
    opt.log_func = g_log_func;

    string phxqueue_global_config_path(config.GetPhxQueueGlobalConfigPath());
    opt.config_factory_create_func = [phxqueue_global_config_path]()->unique_ptr<phxqueue::plugin::ConfigFactory> {
        return unique_ptr<phxqueue::plugin::ConfigFactory>(new phxqueue_phxrpc::plugin::ConfigFactory(phxqueue_global_config_path));
    };

    args.scheduler = new phxqueue_phxrpc::scheduler::Scheduler(opt);
    if (phxqueue::comm::RetCode::RET_OK != args.scheduler->Init()) {
        NLErr("init phxqueue scheduler err");

        return -1;
    }

    return 0;
}


void HttpDispatch(const phxrpc::HttpRequest &request, phxrpc::HttpResponse *response, phxrpc::DispatcherArgs_t *args) {
    ServiceArgs_t *service_args = (ServiceArgs_t *)(args->service_args);

    SchedulerServiceImpl service(*service_args);
    SchedulerDispatcher dispatcher(service, args);

    phxrpc::HttpDispatcher<SchedulerDispatcher> http_dispatcher(
            dispatcher, SchedulerDispatcher::GetURIFuncMap());
    if (!http_dispatcher.Dispatch(request, response)) {
        response->SetStatusCode(404);
        response->SetReasonPhrase("Not Found");
    }
}

void ShowUsage(const char *program) {
    printf("\n");
    printf("Usage: %s [-c <config>] [-d] [-l <log level>] [-v]\n", program);
    printf("\n");

    exit(0);
}


int main(int argc, char *argv[]) {
    const char *config_file{nullptr};
    bool daemonize{false};
    int log_level{-1};
    extern char *optarg ;
    int c ;
    while ((c = getopt(argc, argv, "c:vl:d")) != EOF) {
        switch (c) {
            case 'c' : config_file = optarg; break;
            case 'd' : daemonize = true; break;
            case 'l' : log_level = atoi(optarg); break;

            case 'v' :
            default: ShowUsage(argv[0]); break;
        }
    }

    if (daemonize) phxrpc::ServerUtils::Daemonize();

    assert(signal(SIGPIPE, SIG_IGN) != SIG_ERR);

    // set customize log / monitor
    phxrpc::setvlog(phxqueue::comm::LogFuncForPhxRpc);

    if (nullptr == config_file) ShowUsage(argv[0]);

    SchedulerServerConfig config;
    if (!config.Read(config_file)) ShowUsage(argv[0]);

    if (log_level > 0) config.GetHshaServerConfig().SetLogLevel(log_level);

    //phxqueue::plugin::LoggerSys::GetLogger(program_invocation_short_name, config.GetHshaServerConfig().GetLogLevel(), daemonize, g_log_func);  // syslog
    phxqueue::plugin::LoggerGoogle::GetLogger(program_invocation_short_name, config.GetHshaServerConfig().GetLogDir(), config.GetHshaServerConfig().GetLogLevel(), g_log_func);  // glog

    ServiceArgs_t service_args;
    int ret{MakeArgs(config, service_args)};
    if (0 != ret) {
        printf("ERR: MakeArgs ret %d\n", ret);

        exit(-1);
    }

    phxrpc::HshaServer server(config.GetHshaServerConfig(), HttpDispatch, &service_args);
    server.RunForever();

    phxrpc::closelog();

    return 0;
}


//gzrd_Lib_CPP_Version_ID--start
#ifndef GZRD_SVN_ATTR
#define GZRD_SVN_ATTR "0"
#endif
static char gzrd_Lib_CPP_Version_ID[] __attribute__((used))="$HeadURL: http://scm-gy.tencent.com/gzrd/gzrd_mail_rep/phoenix_proj/trunk/phxqueue/phxqueue_phxrpc/src/scheduler/scheduler_main.cpp $ $Id: scheduler_main.cpp 2144319 2017-06-29 12:19:19Z walnuthe $ " GZRD_SVN_ATTR "__file__";
// gzrd_Lib_CPP_Version_ID--end

