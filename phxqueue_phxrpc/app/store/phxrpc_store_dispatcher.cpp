/* phxrpc_store_dispatcher.h

 Generated by phxrpc_pb2service from store.proto

 Please DO NOT edit unless you know exactly what you are doing.

*/

#include "phxrpc_store_dispatcher.h"

#include <errno.h>

#include "phxrpc/file.h"
#include "phxrpc/http.h"

#include "phxrpc_store_service.h"
#include "store.pb.h"


StoreDispatcher::StoreDispatcher(StoreService &service, phxrpc::DispatcherArgs_t *dispatcher_args)
        : service_(service), dispatcher_args_(dispatcher_args) {}

StoreDispatcher::~StoreDispatcher() {}

const phxrpc::HttpDispatcher< StoreDispatcher >::URIFuncMap &StoreDispatcher::GetURIFuncMap() {
    static phxrpc::HttpDispatcher< StoreDispatcher >::URIFuncMap uri_func_map = {
        {"/phxqueue_phxrpc.store/PHXEcho", &StoreDispatcher::PHXEcho},
        {"/phxqueue_phxrpc.store/Add", &StoreDispatcher::Add},
        {"/phxqueue_phxrpc.store/Get", &StoreDispatcher::Get}};
    return uri_func_map;
}

int StoreDispatcher::PHXEcho(const phxrpc::HttpRequest &request, phxrpc::HttpResponse *response) {
    dispatcher_args_->server_monitor->SvrCall(-1, "PHXEcho", 1);

    int ret = 0;

    google::protobuf::StringValue req;
    google::protobuf::StringValue resp;

    //unpack request
    {
        if (!req.ParseFromString(request.GetContent())) {
            phxrpc::log(LOG_ERR, "ERROR: FromBuffer fail size %zu ip %s",
                request.GetContent().size(), request.GetClientIP());
            return -1 *EINVAL;
        }
    }

    //logic process
    {
        if (0 == ret) ret = service_.PHXEcho(req, &resp);
    }

    //pack response
    {
        if (!resp.SerializeToString(&(response->GetContent()))) {
            phxrpc::log(LOG_ERR, "ERROR: ToBuffer fail ip %s", request.GetClientIP());
            return -1 *ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PHXEcho = %d", ret);

    return ret;
}

int StoreDispatcher::Add(const phxrpc::HttpRequest &request, phxrpc::HttpResponse *response) {
    dispatcher_args_->server_monitor->SvrCall(1, "Add", 1);

    int ret = 0;

    phxqueue::comm::proto::AddRequest req;
    phxqueue::comm::proto::AddResponse resp;

    //unpack request
    {
        if (!req.ParseFromString(request.GetContent())) {
            phxrpc::log(LOG_ERR, "ERROR: FromBuffer fail size %zu ip %s",
                request.GetContent().size(), request.GetClientIP());
            return -1 *EINVAL;
        }
    }

    //logic process
    {
        if (0 == ret) ret = service_.Add(req, &resp);
    }

    //pack response
    {
        if (!resp.SerializeToString(&(response->GetContent()))) {
            phxrpc::log(LOG_ERR, "ERROR: ToBuffer fail ip %s", request.GetClientIP());
            return -1 *ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: Add = %d", ret);

    return ret;
}

int StoreDispatcher::Get(const phxrpc::HttpRequest &request, phxrpc::HttpResponse *response) {
    dispatcher_args_->server_monitor->SvrCall(2, "Get", 1);

    int ret = 0;

    phxqueue::comm::proto::GetRequest req;
    phxqueue::comm::proto::GetResponse resp;

    //unpack request
    {
        if (!req.ParseFromString(request.GetContent())) {
            phxrpc::log(LOG_ERR, "ERROR: FromBuffer fail size %zu ip %s",
                request.GetContent().size(), request.GetClientIP());
            return -1 *EINVAL;
        }
    }

    //logic process
    {
        if (0 == ret) ret = service_.Get(req, &resp);
    }

    //pack response
    {
        if (!resp.SerializeToString(&(response->GetContent()))) {
            phxrpc::log(LOG_ERR, "ERROR: ToBuffer fail ip %s", request.GetClientIP());
            return -1 *ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: Get = %d", ret);

    return ret;
}


//gzrd_Lib_CPP_Version_ID--start
#ifndef GZRD_SVN_ATTR
#define GZRD_SVN_ATTR "0"
#endif
static char gzrd_Lib_CPP_Version_ID[] __attribute__((used))="$HeadURL$ $Id$ " GZRD_SVN_ATTR "__file__";
// gzrd_Lib_CPP_Version_ID--end

