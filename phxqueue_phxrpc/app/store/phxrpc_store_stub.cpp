/* phxrpc_store_stub.cpp

 Generated by phxrpc_pb2client from store.proto

 Please DO NOT edit unless you know exactly what you are doing.

*/

#include "phxrpc_store_stub.h"

#include "phxrpc/network.h"
#include "phxrpc/rpc.h"

#include "store.pb.h"


StoreStub::StoreStub(phxrpc::BaseTcpStream &socket, phxrpc::ClientMonitor &client_monitor)
        : socket_(socket), client_monitor_(client_monitor), keep_alive_(false) {}

StoreStub::~StoreStub() {}

void StoreStub::SetKeepAlive(const bool keep_alive) {
    keep_alive_ = keep_alive;
}

int StoreStub::PHXEcho(const google::protobuf::StringValue &req,
                       google::protobuf::StringValue *resp) {
    phxrpc::HttpCaller caller(socket_, client_monitor_);
    caller.SetURI("/phxqueue_phxrpc.store/PHXEcho", -1);
    caller.SetKeepAlive(keep_alive_);
    return caller.Call(req, resp);
}

int StoreStub::Add(const phxqueue::comm::proto::AddRequest &req,
                   phxqueue::comm::proto::AddResponse *resp) {
    phxrpc::HttpCaller caller(socket_, client_monitor_);
    caller.SetURI("/phxqueue_phxrpc.store/Add", 1);
    caller.SetKeepAlive(keep_alive_);
    return caller.Call(req, resp);
}

int StoreStub::Get(const phxqueue::comm::proto::GetRequest &req,
                   phxqueue::comm::proto::GetResponse *resp) {
    phxrpc::HttpCaller caller(socket_, client_monitor_);
    caller.SetURI("/phxqueue_phxrpc.store/Get", 2);
    caller.SetKeepAlive(keep_alive_);
    return caller.Call(req, resp);
}


//gzrd_Lib_CPP_Version_ID--start
#ifndef GZRD_SVN_ATTR
#define GZRD_SVN_ATTR "0"
#endif
static char gzrd_Lib_CPP_Version_ID[] __attribute__((used))="$HeadURL$ $Id$ " GZRD_SVN_ATTR "__file__";
// gzrd_Lib_CPP_Version_ID--end

