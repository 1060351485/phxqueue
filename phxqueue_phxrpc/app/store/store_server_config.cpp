/* store_server_config.cpp

 Generated by phxrpc_pb2server from store.proto

*/

#include "store_server_config.h"

#include "store.pb.h"


StoreServerConfig::StoreServerConfig() {}

StoreServerConfig::~StoreServerConfig() {}

bool StoreServerConfig::Read(const char *config_file) {
    bool ret = ep_server_config_.Read(config_file);

    if (strlen(ep_server_config_.GetPackageName()) == 0) {
        ep_server_config_.SetPackageName("phxqueue_phxrpc.store");
    }

    // read Extra
    phxrpc::Config config;
    if (!config.InitConfig(config_file)) {
        return false;
    }
    ret &= config.ReadItem("Store", "Topic", topic_, sizeof(topic_));
    ret &= config.ReadItem("Store", "DataDirPath", data_dir_path_, sizeof(data_dir_path_));
    ret &= config.ReadItem("Store", "PhxQueueGlobalConfigPath", phxqueue_global_config_path_, sizeof(phxqueue_global_config_path_));
    ret &= config.ReadItem("Store", "PaxosPort", &paxos_port_);
    ret &= config.ReadItem("Store", "NPaxosIOThread", &npaxos_iothread_);

    return ret;
}

phxrpc::HshaServerConfig &StoreServerConfig::GetHshaServerConfig() {
    return ep_server_config_;
}

const char *StoreServerConfig::GetTopic() const {
    return topic_;
}

const char *StoreServerConfig::GetDataDirPath() const {
    return data_dir_path_;
}

const char *StoreServerConfig::GetPhxQueueGlobalConfigPath() const {
    return phxqueue_global_config_path_;
}

int StoreServerConfig::GetPaxosPort() const {
    return paxos_port_;
}

int StoreServerConfig::GetNPaxosIOThread() const {
    return npaxos_iothread_;
}

//gzrd_Lib_CPP_Version_ID--start
#ifndef GZRD_SVN_ATTR
#define GZRD_SVN_ATTR "0"
#endif
static char gzrd_Lib_CPP_Version_ID[] __attribute__((used))="$HeadURL$ $Id$ " GZRD_SVN_ATTR "__file__";
// gzrd_Lib_CPP_Version_ID--end

